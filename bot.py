import logging
import os
import asyncio
router = Router()  
from aiogram import Bot, Dispatcher, types, Router  # –î–æ–±–∞–≤–∏–ª–∏ Router
from aiogram.filters import Command  # –î–æ–±–∞–≤–∏–ª–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from config import config
from storage import Message, MessageStorage

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not API_TOKEN:
    logger.error("No token provided")
    exit(1)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()  # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
dp.include_router(router)  # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É 

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π
message_storage = MessageStorage()
reminder_sent = False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–°—Ç–∞—Ä—Ç"
start_keyboard = ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [KeyboardButton(text="üöÄ –°—Ç–∞—Ä—Ç")]  # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Å–ø–∏—Å–∫–æ–≤
    ]
)


# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
remove_keyboard = ReplyKeyboardRemove(remove_keyboard=True)


async def send_delayed_message(chat_id: int, delay: float = 2.0):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    logger.info(f"Scheduling delayed message for chat {chat_id}")
    await asyncio.sleep(delay)
    await bot.send_message(chat_id, config.MERGE_REMINDER, reply_markup=remove_keyboard)
    logger.info(f"Sent delayed reminder to chat {chat_id}")

async def show_available_commands(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    logger.info(f"Showing available commands to user {message.from_user.id}")
    await message.answer("\nü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" + config.HELP_MESSAGE, reply_markup=remove_keyboard)

@router.message(Command('start', 'help', 'restart'))  # –ó–∞–º–µ–Ω–∏–ª–∏ @dp –Ω–∞ @router + Command()
async def send_welcome(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start, /help –∏ /restart"""
    global reminder_sent
    user_id = message.from_user.id
    command = message.text
    logger.info(f"Received {command} command from user {user_id}")

    if message.text == '/start':
        await message.answer(config.WELCOME_MESSAGE, reply_markup=start_keyboard)
        logger.info(f"Sent welcome message to user {user_id}")
    elif message.text == '/restart':
        message_storage.clear()
        reminder_sent = False
        await message.answer(config.RESTART_MESSAGE, reply_markup=start_keyboard)
        logger.info(f"Restarted bot for user {user_id}, cleared storage")
    else:  # /help
        await message.answer(config.HELP_MESSAGE, reply_markup=remove_keyboard)
        logger.info(f"Sent help message to user {user_id}")

@router.message_handler(lambda message: message.text == "üöÄ –°—Ç–∞—Ä—Ç")
async def handle_start_button(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ä—Ç"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} pressed Start button")
    await message.answer(config.WELCOME_MESSAGE, reply_markup=remove_keyboard)
    logger.info(f"Sent welcome message after Start button to user {user_id}")

@router.message_handler(lambda message: message.text == '/rename')
async def rename_participants(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    logger.info(f"User {user_id} requested to rename participants")

    if not message_storage.has_messages():
        await message.answer(config.RENAME_NO_PARTICIPANTS, reply_markup=remove_keyboard)
        logger.info(f"No messages to rename participants for user {user_id}")
        return

    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
    first_participant = message_storage.start_rename_process(chat_id)
    if not first_participant:
        await message.answer(config.RENAME_NO_PARTICIPANTS, reply_markup=remove_keyboard)
        logger.info(f"No participants found for renaming for user {user_id}")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    await message.answer(config.RENAME_START, reply_markup=remove_keyboard)
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –ø–µ—Ä–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    await message.answer(
        config.RENAME_ASK_CHANGE.format(first_participant[1]),
        reply_markup=remove_keyboard
    )
    logger.info(f"Started rename process for user {user_id}, active: {message_storage.is_rename_active(chat_id)}")

@router.message_handler(lambda message: message_storage.is_rename_active(message.chat.id))
async def process_rename(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    new_name = message.text
    logger.info(f"Processing rename response from user {user_id}: {new_name}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
    rename_state = message_storage.get_rename_state(chat_id)
    if not rename_state or not rename_state.active:
        logger.warning(f"Rename state not found or inactive for user {user_id}")
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∏–º—è
    if new_name == '+':
        logger.info(f"User {user_id} chose to keep current name")
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        next_participant = message_storage.get_next_participant(chat_id)
        if next_participant:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —É—á–∞—Å—Ç–Ω–∏–∫, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –Ω–µ–≥–æ
            await message.answer(config.RENAME_NEXT, reply_markup=remove_keyboard)
            await message.answer(
                config.RENAME_ASK_CHANGE.format(next_participant[1]),
                reply_markup=remove_keyboard
            )
            logger.info(f"Moving to next participant for user {user_id}")
        else:
            # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = message_storage.get_merged_messages(chat_id)
            await message.answer(config.RENAME_COMPLETE, reply_markup=remove_keyboard)
            await message.answer(result, reply_markup=remove_keyboard)
            await show_available_commands(message)
            logger.info(f"Completed rename process for user {user_id}")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∏–º—è
    if message_storage.rename_current_participant(chat_id, new_name):
        await message.answer(config.RENAME_SUCCESS, reply_markup=remove_keyboard)
        logger.info(f"Renamed participant to {new_name} for user {user_id}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        next_participant = message_storage.get_next_participant(chat_id)
        if next_participant:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —É—á–∞—Å—Ç–Ω–∏–∫, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –Ω–µ–≥–æ
            await message.answer(config.RENAME_NEXT, reply_markup=remove_keyboard)
            await message.answer(
                config.RENAME_ASK_CHANGE.format(next_participant[1]),
                reply_markup=remove_keyboard
            )
            logger.info(f"Moving to next participant for user {user_id}")
        else:
            # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = message_storage.get_merged_messages(chat_id)
            await message.answer(config.RENAME_COMPLETE, reply_markup=remove_keyboard)
            await message.answer(result, reply_markup=remove_keyboard)
            await show_available_commands(message)
            logger.info(f"Completed rename process for user {user_id}")

@router.message_handler(Command('continue'))
async def continue_adding(message: types.Message):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    logger.info(f"User {user_id} continuing to add messages")

    if not message_storage.has_chat_messages(chat_id):
        await message.answer(config.NO_MESSAGES, reply_markup=remove_keyboard)
        logger.info(f"No messages to continue for user {user_id}")
        return

    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∏–º—ë–Ω –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º
    current_messages = message_storage.get_merged_messages(chat_id)
    logger.info(f"Current state before continue for chat {chat_id}:")
    logger.info(f"Messages:\n{current_messages}")
    logger.info(f"Custom names: {message_storage._custom_names}")

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è, –æ—á–∏—â–∞–µ–º –µ–≥–æ
    if message_storage.is_rename_active(chat_id):
        message_storage._rename_states.pop(chat_id, None)
        logger.info(f"Cleared rename state for chat {chat_id}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–º–µ–Ω–∞
    global reminder_sent
    reminder_sent = False
    await message.answer(config.CONTINUE_MESSAGE, reply_markup=remove_keyboard)
    await asyncio.sleep(2)
    await bot.send_message(chat_id, config.MERGE_REMINDER, reply_markup=remove_keyboard)
    logger.info(f"Sent delayed reminder to chat {chat_id}")

@router.message()
async def handle_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
    if message_storage.is_rename_active(message.chat.id):
        return

    global reminder_sent
    user_id = message.from_user.id
    chat_id = message.chat.id

    if message.forward_from or message.forward_from_chat:
        logger.info(f"Received forwarded message from user {user_id}")
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        if message.forward_from:
            sender_id = message.forward_from.id
            sender_name = message_storage._custom_names.get(sender_id, message.forward_from.first_name)
        else:
            sender_id = message.forward_from_chat.id
            sender_name = message_storage._custom_names.get(sender_id, message.forward_from_chat.title)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å –∫ –º–µ–¥–∏–∞
        text = message.text or message.caption
        if not text:
            text = "[–º–µ–¥–∏–∞-—Ñ–∞–π–ª]"

        # –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = Message(sender_id=sender_id, sender_name=sender_name, text=text, chat_id=chat_id)
        message_storage.add_message(msg)
        await message.answer(config.MESSAGE_ADDED, reply_markup=remove_keyboard)
        logger.info(f"Added message from {sender_name} to storage for user {user_id}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not reminder_sent:
            asyncio.create_task(send_delayed_message(chat_id))
            reminder_sent = True
            logger.info(f"Scheduled reminder for user {user_id}")

    elif message.text == "/merge":
        logger.info(f"User {user_id} requested to merge messages")
        if not message_storage.has_chat_messages(chat_id):
            await message.answer(config.NO_MESSAGES, reply_markup=remove_keyboard)
            logger.info(f"No messages to merge for user {user_id}")
            return

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        result = message_storage.get_merged_messages(chat_id)
        await message.answer(result, reply_markup=remove_keyboard)
        logger.info(f"Sent merged messages to user {user_id}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
        await show_available_commands(message)

    else:
        # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /continue
        if message.text != "/continue":
            await message.answer(config.INVALID_MESSAGE, reply_markup=remove_keyboard)
            logger.info(f"Received invalid message from user {user_id}")

@router.message(Command('clear'))
async def clear_messages(message: types.Message):
    """–û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    global reminder_sent
    user_id = message.from_user.id
    logger.info(f"Clearing messages for user {user_id}")

    message_storage.clear()
    reminder_sent = False
    await message.answer(config.MESSAGES_CLEARED, reply_markup=remove_keyboard)
    logger.info(f"Cleared all messages for user {user_id}")


async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    logger.info("Starting bot...")
    asyncio.run(main())
